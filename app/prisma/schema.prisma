generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Achievements {
  id        Int       @id @default(autoincrement())
  title     String    @db.Text
  subtitle  String    @db.Text
  image_id  Int?
  startDate DateTime? @db.Date
  endDate   DateTime? @db.Date
  images    Images?   @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "image_id")
}

model ContactInformation {
  id   Int    @id @default(autoincrement())
  name String @db.Text
  link String @db.Text
}

model Highlights {
  id          Int      @id @default(autoincrement())
  name        String   @db.Text
  description String   @db.Text
  date        DateTime @db.Timestamp(0)
  image_id    Int?
  images      Images?  @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "image_id")
}

model Maintainers {
  id       Int     @id @default(autoincrement())
  name     String  @db.Text
  headline String  @db.Text
  bio      String  @db.Text
  image_id Int?
  images   Images? @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "image_id")
}

model OpenGraphData {
  id          Int    @id @default(autoincrement())
  title       String @db.Text
  description String @db.Text
  type        String @db.Text
  image_id    Int
  images      Images @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "image_id")
}

model Skills {
  id      Int     @id @default(autoincrement())
  name    String  @db.Text
  score   Int?
  icon_id Int?
  images  Images? @relation(fields: [icon_id], references: [id])

  @@index([icon_id], name: "icon_id")
}

model Project {
  id            Int            @id @default(autoincrement())
  name          String         @db.Text
  description   String         @db.Text
  content       String         @db.LongText
  date          DateTime       @db.Date
  projectImages ProjectImage[]
  projectVideos ProjectVideo[]
}

model ProjectImage {
  id        Int     @id @default(autoincrement())
  imageId   Int
  projectId Int
  priority  Int
  image     Images  @relation(fields: [imageId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model ProjectVideo {
  id        Int     @id @default(autoincrement())
  videoId   Int
  projectId Int
  priority  Int
  project   Project @relation(fields: [projectId], references: [id])
  video     Video   @relation(fields: [videoId], references: [id])
}

model Images {
  id            Int             @id @default(autoincrement())
  path          String?         @db.Text
  description   String?         @db.Text
  achievements  Achievements[]
  highlights    Highlights[]
  maintainers   Maintainers[]
  openGraphData OpenGraphData[]
  skills        Skills[]
  projectImage  ProjectImage[]
}

model Video {
  id           Int            @id @default(autoincrement())
  url          String         @db.Text
  description  String         @db.Text
  projectVideo ProjectVideo[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  sessions      Session[]
  permissions   UserPermission[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Permission {
  id  Int    @id @default(autoincrement())
  key String @unique

  userPermission UserPermission[]
}

model UserPermission {
  id           String @id @default(cuid())
  userId       String
  permissionId Int

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
