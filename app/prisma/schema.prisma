generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Achievements {
  id        Int       @id @default(autoincrement())
  title     String    @db.Text
  subtitle  String    @db.Text
  image_id  Int?
  startDate DateTime? @db.Date
  endDate   DateTime? @db.Date
  images    Images?   @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "image_id")
}

model ContactInformation {
  id      Int    @id @default(autoincrement())
  name    String @db.Text
  link    String @db.Text
  imageId Int?

  image Images? @relation(fields: [imageId], references: [id])
}

model Highlights {
  id          Int      @id @default(autoincrement())
  name        String   @db.Text
  description String   @db.Text
  date        DateTime @db.Timestamp(0)
  image_id    Int?
  images      Images?  @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "image_id")
}

model Maintainers {
  id       Int     @id @default(autoincrement())
  name     String  @db.Text
  headline String  @db.Text
  bio      String  @db.Text
  image_id Int?
  images   Images? @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "image_id")
}

model OpenGraphData {
  id          Int    @id @default(autoincrement())
  title       String @db.Text
  description String @db.Text
  type        String @db.Text
  image_id    Int
  images      Images @relation(fields: [image_id], references: [id])

  @@index([image_id], name: "image_id")
}

model Skills {
  id      Int     @id @default(autoincrement())
  name    String  @db.Text
  score   Int?
  icon_id Int?
  images  Images? @relation(fields: [icon_id], references: [id])

  @@index([icon_id], name: "icon_id")
}

model Project {
  id            Int            @id @default(autoincrement())
  name          String         @db.Text
  description   String         @db.Text
  content       String         @db.LongText
  date          DateTime       @db.Date
  projectImages ProjectImage[]
  projectVideos ProjectVideo[]
}

model ProjectImage {
  id        Int     @id @default(autoincrement())
  imageId   Int
  projectId Int
  priority  Int
  image     Images  @relation(fields: [imageId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model ProjectVideo {
  id        Int     @id @default(autoincrement())
  videoId   Int
  projectId Int
  priority  Int
  project   Project @relation(fields: [projectId], references: [id])
  video     Video   @relation(fields: [videoId], references: [id])
}

model Images {
  id                 Int                  @id @default(autoincrement())
  path               String?              @db.Text
  description        String?              @db.Text
  achievements       Achievements[]
  highlights         Highlights[]
  maintainers        Maintainers[]
  openGraphData      OpenGraphData[]
  skills             Skills[]
  projectImage       ProjectImage[]
  contactInformation ContactInformation[]
}

model Video {
  id           Int            @id @default(autoincrement())
  url          String         @db.Text
  description  String         @db.Text
  projectVideo ProjectVideo[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String  @default("")
  provider           String  @default("google")
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  UserPermission UserPermission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPermission {
  id         String @id @default(cuid())
  userId     String
  permission String

  user User @relation(fields: [userId], references: [id])
}

model PermittedUserEmail {
  id    Int    @id @default(autoincrement())
  email String @unique
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
